import { ISplitPath } from "@benbraide/inlinejs";
import { IRouterPageName, IRouterConcept, IRouterMiddleware, IRouterPage, IRouterPageOptions, IRouterFetcher, RouterProtocolHandlerType, IRouterFetcherSearchResponse, RouterDataHandlerType, RouterPathChangeHandlerType } from "./types";
export declare class RouterConcept implements IRouterConcept {
    private prefix_;
    private origin_;
    private markers_;
    private onEvent_;
    private checkpoints_;
    private active_;
    private middlewares_;
    private fetchers_;
    private protocolHandlers_;
    private dataHandlers_;
    private pathChangeHandlers_;
    private pages_;
    private mountPath_;
    private current_;
    constructor(prefix_?: string, origin_?: string);
    GetOrigin(): string;
    SetPrefix(prefix: string): void;
    GetPrefix(): string;
    AddMiddleware(middleware: IRouterMiddleware): void;
    RemoveMiddleware(middleware: IRouterMiddleware | string): void;
    AddFetcher(fetcher: IRouterFetcher): void;
    FindFetcher(path: string): IRouterFetcherSearchResponse | null;
    RemoveFetcher(fetcher: IRouterFetcher): void;
    AddProtocolHandler(protocol: string | RegExp, handler: RouterProtocolHandlerType): void;
    RemoveProtocolHandler(handler: RouterProtocolHandlerType): void;
    AddDataHandler(handler: RouterDataHandlerType): void;
    RemoveDataHandler(handler: RouterDataHandlerType): void;
    AddPathChangeHandler(handler: RouterPathChangeHandlerType): void;
    RemovePathChangeHandler(handler: RouterPathChangeHandlerType): void;
    AddPage({ path, ...rest }: IRouterPageOptions): string;
    RemovePage(page: string | IRouterPageName): {
        id: string;
        path: string | RegExp;
        name?: string | undefined;
        title?: string | undefined;
        middleware?: string | string[] | undefined;
        cache?: boolean | undefined;
        reload?: boolean | undefined;
        onActive?: ((id: string) => void) | undefined;
        onInactive?: ((id: string) => void) | undefined;
    } | null;
    FindPage(page: string | IRouterPageName): IRouterPage | null;
    FindMatchingPage(path: string): IRouterPage | null;
    Mount(load?: boolean): void;
    Goto(path: string | ISplitPath | IRouterPageName, shouldReload?: boolean, data?: any): void;
    Reload(): void;
    GetCurrentPath(): string;
    GetCurrentQueryParams(): Record<string, string | string[]>;
    GetCurrentQueryParam(name: string): string | string[] | null;
    GetActivePage(): IRouterPage | null;
    GetActivePageData(key?: string): any;
    private GetProtocolString_;
    private FindProtocolHandler_;
    private Load_;
    private DoLoad_;
    private SetActiveState_;
    private ResolveQueryParams_;
}
